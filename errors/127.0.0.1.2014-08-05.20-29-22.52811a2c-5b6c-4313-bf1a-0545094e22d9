(dp1
S'output'
p2
S"<type 'exceptions.TypeError'> <gluon.html.XML object at 0x107691a10> is not JSON serializable"
p3
sS'layer'
p4
S'/Users/sky/Desktop/web2py/applications/lelui/controllers/default.py'
p5
sS'code'
p6
S'import random\nimport json\n\ndef index():\n    return dict(message=T(\'Welcome to our Crowd Sourcing Platform!\'))\n\n#@auth.requires_login()\ndef get_sentence():\n    return "bla"\n\n#@auth.requires_login()\ndef tutorial():\n    return dict()\n\n\n\ndef getSentence(data):\n    ret = "<p>"\n    words = data[\'sentence\']\n    separators = data[\'conjunction\']\n    j = 0\n    for i in xrange(len(words)):\n        if j <> len(separators) and i == separators[j]:\n            j += 1\n            ret += "<span class=\'red\' id=\'"+str(i)+"\'>" + words[i] + "&nbsp;</span>"\n        else:\n            ret += "<span class=\'word\' id=\'"+str(i)+"\'>" + words[i] + "&nbsp;</span>"\n    ret += "</p>"\n    return XML(ret)\n\ndef getAnnotation(data):\n    ret = "<p>"\n    words = data[\'sentence\']\n    separators = data[\'conjunction\']\n    high = data[\'highlighted\']\n    j = 0\n    k = 0\n    for i in xrange(len(words)):\n        if j <> len(separators) and i == separators[j]:\n            j += 1\n            ret += "<span class=\'red\'>" + words[i] + "&nbsp;</span>"\n        elif k <> len(high) and i == high[k]:\n            k += 1\n            ret += "<span class=\'high\'>" + words[i] + "&nbsp;</span>"\n        else:\n            ret += "<span>" + words[i] + "&nbsp;</span>"\n    ret += "</p>"\n    return XML(ret)\n#@auth.requires_login()\ndef contribute():\n    db(db.clear).delete()\n    db.clear.insert(sentence=["this", "is", "shit", "and", "smack"], conjunction=[3])\n    db(db.once).delete()\n    # db.once.insert(sentence=["this", "is", "shit", "and", "smack"], conjunction=[3], highlighted=[2,4])\n    x = db(db.clear).select()\n    y = db(db.once).select()\n    z = db(db.approved).select()\n    instr = None\n    btn = None\n    sn = None\n    if len(x) > len(y):\n        instr = XML("<h4> Annotate the following sentence for list elements </h4>")\n        btn = XML("<button type=\'submit\' class=\'btn btn-primary\' id=\'submit\'>Submit</button>")\n        session.index = random.randint(0, len(x)-1)\n        # print x[session.index]\n        sn = getSentence(x[session.index])\n    else:\n        instr = XML("<h4> Approve or disapprove the following annotation </h4>")\n        btn = XML("<button type=\'submit\' class=\'btn btn-success\'>Approve</button> <button type=\'submit\' class=\'btn btn-danger\'>Disapprove</button>")\n        session.index = random.randint(0, len(y)-1)\n        sn = getAnnotation(y[session.index])\n    return dict(sentence=sn, clear=len(x), once=len(y), approved=len(z), instruction=instr, buttons=btn)\n\n\ndef recordAnnotation():\n    lis = map(int, request.vars.lis.split(\',\'))\n    print lis\n    ret =  json.dumps({"bla" : XML("<p> blah </p>")})\n    print ret\n    return "te"\n\ndef user():\n    """\n    exposes:\n    http://..../[app]/default/user/login\n    http://..../[app]/default/user/logout\n    http://..../[app]/default/user/register\n    http://..../[app]/default/user/profile\n    http://..../[app]/default/user/retrieve_password\n    http://..../[app]/default/user/change_password\n    http://..../[app]/default/user/manage_users (requires membership in\n    use @auth.requires_login()\n        @auth.requires_membership(\'group name\')\n        @auth.requires_permission(\'read\',\'table name\',record_id)\n    to decorate functions that need access control\n    """\n    return dict(form=auth())\n\n@cache.action()\ndef download():\n    """\n    allows downloading of uploaded files\n    http://..../[app]/default/download/[filename]\n    """\n    return response.download(request, db)\n\n\ndef call():\n    """\n    exposes services. for example:\n    http://..../[app]/default/call/jsonrpc\n    decorate with @services.jsonrpc the functions to expose\n    supports xml, json, xmlrpc, jsonrpc, amfrpc, rss, csv\n    """\n    return service()\n\n\n@auth.requires_signature()\ndef data():\n    """\n    http://..../[app]/default/data/tables\n    http://..../[app]/default/data/create/[table]\n    http://..../[app]/default/data/read/[table]/[id]\n    http://..../[app]/default/data/update/[table]/[id]\n    http://..../[app]/default/data/delete/[table]/[id]\n    http://..../[app]/default/data/select/[table]\n    http://..../[app]/default/data/search/[table]\n    but URLs must be signed, i.e. linked with\n      A(\'table\',_href=URL(\'data/tables\',user_signature=True))\n    or with the signed load operator\n      LOAD(\'default\',\'data.load\',args=\'tables\',ajax=True,user_signature=True)\n    """\n    return dict(form=crud())\n\nresponse._vars=response._caller(recordAnnotation)\n'
p7
sS'snapshot'
p8
(dp9
sS'traceback'
p10
S'Traceback (most recent call last):\n  File "/Users/sky/Desktop/web2py/gluon/restricted.py", line 220, in restricted\n    exec ccode in environment\n  File "/Users/sky/Desktop/web2py/applications/lelui/controllers/default.py", line 135, in <module>\n  File "/Users/sky/Desktop/web2py/gluon/globals.py", line 385, in <lambda>\n    self._caller = lambda f: f()\n  File "/Users/sky/Desktop/web2py/applications/lelui/controllers/default.py", line 78, in recordAnnotation\n    ret =  json.dumps({"bla" : XML("<p> blah </p>")})\n  File "/System/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/json/__init__.py", line 243, in dumps\n    return _default_encoder.encode(obj)\n  File "/System/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/json/encoder.py", line 207, in encode\n    chunks = self.iterencode(o, _one_shot=True)\n  File "/System/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/json/encoder.py", line 270, in iterencode\n    return _iterencode(o, 0)\n  File "/System/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/json/encoder.py", line 184, in default\n    raise TypeError(repr(o) + " is not JSON serializable")\nTypeError: <gluon.html.XML object at 0x107691a10> is not JSON serializable\n'
p11
s.